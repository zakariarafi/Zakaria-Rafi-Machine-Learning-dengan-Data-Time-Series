# -*- coding: utf-8 -*-
"""Revision-Final-Zakaria Rafi_Proyek2-TimeSeries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DpNTfFZQHV18GpnP9i-epVcIPwH3MhES

# Proyek Pengembangan Machine Learning: Time Series

- Nama: Zakaria Rafi
- Email: zakariarafifahmi@gmail.com
- Id Dicoding:zakaria_rafi
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
from tensorflow.keras.callbacks import Callback

# Muat data
df = pd.read_csv('hour.csv')
print(df.head())

# Hitung threshold MAE
threshold = (df['cnt'].max() - df['cnt'].min()) * 10 / 100  # Gantikan 'cnt' dengan nama kolom target Anda
print(f"Threshold MAE: {threshold}")

# Pilih fitur dan target
features = df.drop(columns=["instant", "dteday", "cnt"])
target = df["cnt"]

# Normalisasi fitur
scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(features)

# Bagi data menjadi training dan validation sets
X_train, X_val, y_train, y_val = train_test_split(scaled_features, target, test_size=0.2, random_state=42)

# Mencetak jumlah total dataset, jumlah dataset training, dan jumlah dataset validasi
print(f"Total dataset: {len(df)}")
print(f"Training set: {len(X_train)}")
print(f"Validation set: {len(X_val)}")

# Verifikasi apakah validation set sudah sebesar 20% dari total dataset
validation_percentage = len(X_val) / len(df) * 100
print(f"Validation set is {validation_percentage:.2f}% of the total dataset.")

# Ubah bentuk data untuk LSTM
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_val = np.reshape(X_val, (X_val.shape[0], X_val.shape[1], 1))

# Bangun model
model = Sequential([
    LSTM(50, input_shape=(X_train.shape[1], 1), return_sequences=True),
    LSTM(50),
    Dense(1)
])

# Kompilasi model
optimizer = Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='mean_absolute_error', metrics=['mae'])

# Callback untuk menghentikan training jika MAE < threshold
class ThresholdCallback(Callback):
    def on_epoch_end(self, epoch, logs=None):
        if logs.get('mae') < threshold and logs.get('val_mae') < threshold:
            print(f"\nMAE dan val_MAE lebih kecil dari threshold pada epoch {epoch}. Menghentikan pelatihan.")
            self.model.stop_training = True

# Latih model
history = model.fit(
    X_train, y_train,
    validation_data=(X_val, y_val),
    epochs=100,
    batch_size=32,
    callbacks=[ThresholdCallback()],  # Tambahkan callback
    verbose=1
)

# Plot loss selama training
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Tampilkan metrics MAE selama training dan validasi
plt.plot(history.history['mae'], label='Training MAE')
plt.plot(history.history['val_mae'], label='Validation MAE')
plt.title('MAE Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('MAE')
plt.legend()
plt.show()